<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home - Chia Network</title>
    <description>We're building a blockchain based on proofs of space and time to make a cryptocurrency that is less wasteful, more decentralized, and more secure.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 16 Mar 2019 14:16:10 -0700</pubDate>
    <lastBuildDate>Sat, 16 Mar 2019 14:16:10 -0700</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Chia VDF Competition Round 1 Results and Announcements</title>
        <description>&lt;p&gt;Thank you to everyone who participated in the first round of Chia Network’s Verifiable Delay Function (VDF) competition. The round concluded on January 3rd, 2019 with many excellent submissions from the participants. The quality of the entries exceeded our expectations, and we’re happy that the competition format proved successful. The teams used a variety of approaches, contributed to interesting discussions on our Keybase channels, and massively improved upon our reference implementation. The entries are helping us learn a lot about how to create a better VDF.&lt;/p&gt;

&lt;p&gt;We’re excited to announce the results of Track 1 for this first round of competition (&lt;strong&gt;Track 2 will be announced after we review additional documentation submitted by the entrants&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;Track 1&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;bulaiden: 40.65 seconds&lt;/li&gt;
  &lt;li&gt;sundersoft: 46.13 seconds&lt;/li&gt;
  &lt;li&gt;akashnil: 53.25 seconds&lt;/li&gt;
  &lt;li&gt;pulledpork: 84.56 seconds&lt;/li&gt;
  &lt;li&gt;anonymous1: 88.58 seconds&lt;/li&gt;
  &lt;li&gt;pulmark: 112.89 seconds&lt;/li&gt;
  &lt;li&gt;psa: 128.80 seconds&lt;/li&gt;
  &lt;li&gt;anonymous2: 140.83 seconds&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reference implementation: 169 seconds&lt;/p&gt;

&lt;p&gt;Passphrase for contest discriminants: chia until sweet pleasant full sleep&lt;/p&gt;

&lt;p&gt;Two Track 1 teams were disqualified: cryptoslava (six discriminants did not finish, but the four discriminants which did work ran in an average of 34.69 seconds), and poanetwork (working entry was submitted after the deadline, with average run time of 132.16 seconds).&lt;/p&gt;

&lt;p&gt;Because of all the hard work the teams put into the competition, in addition to the first and second place Track 1 prizes ($40,000 to first place and $20,000 to second place), we’ve decided to also award $2000 prize money to each of the other Track 1 teams who entered the contest.&lt;/p&gt;

&lt;p&gt;All of the code from participating teams is open source and can be found at &lt;a href=&quot;https://github.com/Chia-Network/vdftrack1results&quot;&gt;https://github.com/Chia-Network/vdftrack1results&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the most significant optimizations incorporated by several teams was the use of the NUDUPL algorithm, a squaring version of the more general composition algorithm NUCOMP, which was first introduced by Shanks in 1989 [1]. NUDUPL incorporates partial reduction during squaring, decreasing the complexity of the intermediary operands. Since Shank’s introduction of the algorithm, others have improved upon NUDUPL and demonstrated its efficiency over classical composition algorithms (see, for instance, [2], [3], [4]).&lt;/p&gt;

&lt;p&gt;Other optimizations from the competition included using the Lehmer algorithm for gcd computation, MPIR as a faster fork of GMP, and SIMD instructions for fast integer operations. LibFlint, which depends upon MPIR, includes the NUDUPL and Lehmer algorithms and was used by some teams. Many other small optimizations were implemented as well. And while the majority of the submissions were in C or C++, one team submitted an entry in Rust.&lt;/p&gt;

&lt;p&gt;We’ll iterate on the competition by incorporating the solutions from this first round into our next round of competition, the details and rules of which will be announced soon. Our second round will include another contest to find the fastest VDF implementation (Track 1), but for now we’re holding off on a second round of discriminant breaking (Track 2). The prize money that had been set aside for a second Track 2 round will be redistributed toward other portions of the competition.&lt;/p&gt;

&lt;p&gt;Thanks again to all the teams who participated, and congratulations to the winners of round 1! We look forward to working with everyone in round 2.&lt;/p&gt;

&lt;p&gt;[1] D. Shanks (1989). On Gauss and composition I and II. Proc. NATO ASI on Number Theory and Applications, pp. 163–204, R. Mollin (ed). Kluwer Academic Publishers, Dordrecht.&lt;/p&gt;

&lt;p&gt;[2] M. J. Jacobson Jr., and A. J. van der Poorten (2002). Computational aspects of NUCOMP. Algorithmic Number Theory — ANTS-V, volume 2369 of Lecture Notes in Computer Science, pp. 120–133, C. Fieker and D.R. Kohel (eds). Springer-Verlag, Berlin.&lt;/p&gt;

&lt;p&gt;[3] M. J. Jacobson Jr., R. Scheidler, H. C. Williams (2006). An improved real-quadratic-ﬁeld-based key exchange procedure. Journal of Cryptology, 19, pp. 211–239.&lt;/p&gt;

&lt;p&gt;[4] A. J. van der Poorten (2003). A note on NUCOMP. Mathematics of Computation, 72, pp. 1935–1946.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Jan 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/2019/01/17/chia-vdf-competition-round-1-results-and-announcements.en.html</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/17/chia-vdf-competition-round-1-results-and-announcements.en.html</guid>
        
        
      </item>
    
      <item>
        <title>Chia VDF Competition Guide</title>
        <description>&lt;p&gt;Chia Network recently launched a three month long competition to create faster implementations of our proofs of time and get a better handle on its security requirements. The Verifiable Delay Function Competition (VDF, aka proof of time) is open to anyone, has $100,000 in total prize money, and is running until January 3rd, 2019.&lt;/p&gt;

&lt;p&gt;In the interests of making it as easy as possible to join the competition, this post gives an overview of the different tracks, as well as step-by-step instructions one how to submit an entry. The full details of the competition are available on our &lt;a href=&quot;https://github.com/Chia-Network/vdf-competition&quot;&gt;Github page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;purpose-and-explanation&quot;&gt;Purpose and Explanation&lt;/h3&gt;

&lt;p&gt;The Chia consensus algorithm uses proof of space as its key resource. In order to create a secure consensus algorithm, however, proof of space is not enough. Attackers can grind on many possible solutions, or create a longer alternate blockchain, especially if they have a lot of computational power. To protect against these attacks, &lt;a href=&quot;https://eprint.iacr.org/2018/601.pdf&quot;&gt;Verifiable Delay Functions&lt;/a&gt; are used to enforce real time between blocks. VDFs are deterministic functions which are non-parallelizable, and for which it’s possible to efficiently calculate short, easy to verify proofs. As long as an attacker can’t compute the VDF much faster than honest parties, the above attacks will not be practical.&lt;/p&gt;

&lt;p&gt;The VDF that Chia is using is repeated squarings (likely verified with a Wesolowski proof, but that isn’t part of this competition). This must be done in a group, for which we’re using ideal class groups, which are explained in the &lt;a href=&quot;https://github.com/Chia-Network/vdf-competition/blob/master/classgroups.pdf&quot;&gt;class group document&lt;/a&gt;. Class groups are mathematical &lt;a href=&quot;https://en.wikipedia.org/wiki/Group_%28mathematics%29&quot;&gt;groups&lt;/a&gt; defined by their discriminant D, and they have a group operation (composition), and an element representation that consists of three integers (A, B, C). The repeated squarings VDF takes an generator g = (A, B, C), and performs the composition operation on itself for the required number of iterations.&lt;/p&gt;

&lt;p&gt;So if the VDF requires 1,000,000 iterations, the algorithm would square/compose the input 1,000,000 times.&lt;/p&gt;

&lt;p&gt;g = (A, B, C)&lt;/p&gt;

&lt;p&gt;g² = (A, B, C) compose (A, B,C)&lt;/p&gt;

&lt;p&gt;(g²)² = (A’, B’, C’) compose (A’, B’, C’)&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;… (1,000,000 iterations)&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;y = (Af, Bf, Cf)&lt;/p&gt;

&lt;p&gt;Since the order of the group is not known, the squaring operation is believed to require all the squarings, as explained &lt;a href=&quot;https://github.com/Chia-Network/vdf-competition/blob/master/classgroups.pdf&quot;&gt;here&lt;/a&gt;. A verifiable delay function also needs to provide a short proof, so that verifiers can quickly check that it was performed correctly without running the intensive computation themselves. However, for the purposes of this competition, we only care about the output of the VDF, not the proof.&lt;/p&gt;

&lt;h3 id=&quot;track-1-fastest-vdf-implementation&quot;&gt;Track 1: Fastest VDF Implementation&lt;/h3&gt;

&lt;p&gt;Track 1 requires the competitor to efficiently evaluate N VDF iterations, given the discriminant D. The generator element g should be computed as:&lt;/p&gt;

&lt;p&gt;g = (2, 1, 1-D/8).&lt;/p&gt;

&lt;p&gt;Then, g should be squared repeatedly, N times, and the output, y, in reduced form, should be printed to stdout. The competitor that can output the correct element the fastest wins.&lt;/p&gt;

&lt;p&gt;The discriminants used for Track 1 will be of size 2048 bits, so the numbers used in the composition algorithm will be large, and thus reduction is necessary. The discriminants are generated using the create_discriminant algorithm, which hashes to a random prime with certain properties, and then takes the negation. The discriminant can be assumed the negation of a prime p, where p % 8 == 7.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/Chia-Network/vdf-competition/tree/master/sample-entry-1&quot;&gt;sample entry 1&lt;/a&gt; for an example of what an entry for Track 1 should look like. On the benchmark machine squaring a number the required 2097152 times (that’s 2²¹) in a group with a 2048 bit discriminant takes about 169 seconds. Presumably the winning entries will improve on that substantially.&lt;/p&gt;

&lt;p&gt;The discriminants used for judging will be released at the end of the competition. The commitment to these discriminants is “2fe1e53289900911495b570a6ef9bed17b90a7eb02922631563fca641b83b8ef”&lt;/p&gt;

&lt;p&gt;The discriminants can be generated, and the commitment verified, using &lt;a href=&quot;https://github.com/Chia-Network/vdf-competition/blob/master/tools/create_competition_discriminants.py&quot;&gt;the verification script&lt;/a&gt;. The number of iterations N will be 2²¹ = 2097152. The first place winner will receive $40,000, and the second place winner $20,000.&lt;/p&gt;

&lt;h3 id=&quot;track-2-best-discriminant-break&quot;&gt;Track 2: Best Discriminant Break&lt;/h3&gt;

&lt;p&gt;The second track is about breaking the largest possible class groups. If one can find the order of an element in the class group, it might make the class group insecure. The order of the element is the smallest integer m such that e^m = identity. Track 2 requires competitors to find the order of any element in the class group other than the identity.&lt;/p&gt;

&lt;p&gt;This should be easy to do for very small groups (small discriminant), but more and more difficult the larger the discriminant gets. 2048 bits (for Track 1) is likely an overly conservative choice allowing for more optimizations and higher cost of making custom hardware than necessary. The purpose of this track is to get a sense of the how large of class groups can be broken.&lt;/p&gt;

&lt;p&gt;The competition requires the submission of 3 different seeds for create_discriminant(), and for each of those an element (A, B, C) and order (an integer specifying the order of that class group element). The smallest absolute value of the three discriminants is the final score. The exact specification is judge_entry.py.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/Chia-Network/vdf-competition/tree/master/sample-entry-2&quot;&gt;sample entry 2&lt;/a&gt; for an example of what an entry for Track 2 should look like. The first place winner will receive $27,000, and the second place winner $13,000. New sample entries can be made using baby_giant_step.py, but there are much better known algorithms.&lt;/p&gt;

&lt;h3 id=&quot;steps-for-participating&quot;&gt;Steps for Participating&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Both submissions and communications with the Chia team are done via Keybase (https://keybase.io/). After you install the Keybase application, we have two channels available in &lt;strong&gt;chia_network.public&lt;/strong&gt;: #VDF_contest (for discussions related to the competition) and #general (for general discussions about Chia). To join, type in your terminal: keybase team request-access chia_network.public&lt;/li&gt;
  &lt;li&gt;Complete the &lt;a href=&quot;https://www.dropbox.com/s/odsglm1eu9z6g8v/CHIA%20NETWORK%20APPLICATION%20FORM%204812-8893-1439%20v.1.pdf?dl=0&quot;&gt;Entry Form&lt;/a&gt; together with the signed version of &lt;a href=&quot;https://www.dropbox.com/s/3hmxe7717x5a0pp/Chia%20Network%20-%20VDF%20Contest%20Rules%20and%20Disclosures%20%286%29.pdf?dl=0&quot;&gt;VDF Competition Rules and Disclosures Agreement&lt;/a&gt;. In the case of team participation, each team member must complete both forms and all members must choose the same point of contact. The forms should be sent to Ali Shadle, either via Keybase (@ashadle) or via email (&lt;a href=&quot;mailto:ali@chia.net&quot;&gt;ali@chia.net&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;After we check the registration forms, a private channel will be created for you or your team (chia_network.TEAM_NAME) with engineers from our Chia development team as participants. You can ask us questions regarding the competition there.&lt;/li&gt;
  &lt;li&gt;Each team can create shared Keybase Git repositories where code can be submitted. Here (https://keybase.io/blog/encrypted-git-for-everyone) are some instructions about using Keybase Git repositories.&lt;/li&gt;
  &lt;li&gt;Check out the vdf-competition &lt;a href=&quot;https://github.com/Chia-Network/vdf-competition&quot;&gt;Github repo&lt;/a&gt; to see explanations and sample code for class groups, as well as a sample submission for each track.&lt;/li&gt;
  &lt;li&gt;To participate in &lt;strong&gt;Track 1: Fastest VDF Implementation&lt;/strong&gt; track, upload your files to a shared git repository under chia_network.TEAM_NAME. A sample entry can be found &lt;a href=&quot;https://github.com/Chia-Network/vdf-competition/tree/master/sample-entry-1&quot;&gt;here&lt;/a&gt;. The folder must contain two files: &lt;strong&gt;install.sh&lt;/strong&gt; and &lt;strong&gt;run.sh&lt;/strong&gt;, which must both be executable, and start with “#!/bin/sh”. We’ll first run &lt;strong&gt;install.sh&lt;/strong&gt; on our ubuntu test machine (specs below), which should resolve any dependencies, and compile the code. Then we’ll run &lt;strong&gt;run.sh&lt;/strong&gt;, passing it two parameters: the discriminant in hex and the number of iterations, in decimal. The score of the entry will be the time used by run.sh to output the correct answer on our reference hardware. An incorrect answer will not be scored at all. The entry folder must also include a README file which describes the approach used.&lt;/li&gt;
  &lt;li&gt;In order to participate in &lt;strong&gt;Track 2: Best Discriminant Break&lt;/strong&gt; track, upload your files to a shared git repository under chia_network.TEAM_NAME. The folder must contain a file called &lt;strong&gt;entry.txt&lt;/strong&gt;, which should contain three lines, one line for each discriminant provided. Each line must contain six numbers, separated by a space: seed (in hex), length, a, b, c, and order. For scoring, the script &lt;strong&gt;judge_entry.py&lt;/strong&gt; from the tools folder is used. The entry folder must also contain a file README which explains the approach used.&lt;/li&gt;
  &lt;li&gt;Only the last entry will be judged. At the end of the competition (after January 3rd), we’ll judge all entries from all the shared Keybase Github repositories and we’ll announce the winners.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Track 1: Fastest VDF Implementation&lt;/strong&gt;, we have deployed a system to run your entry on the reference machine and give feedback on how well it performed. You can use the VDF chat bot to run KeyBase git repo submissions on our reference hardware. You can test your results by sending the bolded message below to vdf_bot in your KeyBase private channel. vdf_bot will then report back to you the timing results or any errors that occur: &lt;code class=&quot;highlighter-rouge&quot;&gt;/vdf judge_speed keybase://team/chia_network.TEAM_NAME/entry&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Track 2: Best Discriminant Break&lt;/strong&gt;, you can use the VDF chat bot to test your KeyBase git repo entry.txt format by sending the bolded message below to vdf_bot in your KeyBase private channel. vdf_bot will then report back to you whether it was evaluated successfully or any errors that occur: &lt;code class=&quot;highlighter-rouge&quot;&gt;/vdf judge_discriminant keybase://team/chia_network.TEAM_NAME/track2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;benchmark-machine-specs&quot;&gt;Benchmark machine specs&lt;/h3&gt;

&lt;p&gt;Dell Inspiron 3670 64bit&lt;/p&gt;

&lt;p&gt;i5 -8400 @ 2.8GHz&lt;/p&gt;

&lt;p&gt;8GB ram&lt;/p&gt;

&lt;p&gt;GPU: Geforce GTX 1060 3GB&lt;/p&gt;

&lt;p&gt;For any questions, join us on Keybase: keybase team request-access chia_network.public, and join the #VDF_contest channel. We hope you participate!&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Nov 2018 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/2018/11/07/chia-vdf-competition-guide.en.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/07/chia-vdf-competition-guide.en.html</guid>
        
        
      </item>
    
      <item>
        <title>The ASIC Resistance of Proof of Space</title>
        <description>&lt;p&gt;A recent &lt;a href=&quot;http://multicoin.libsyn.com/conversations-with-multicoin-capital-dhruv-bansal&quot;&gt;podcast&lt;/a&gt; speculated quite a bit about the economics of Chia Network’s new proof of space and time consensus algorithm.&lt;/p&gt;

&lt;p&gt;Let’s discuss the assertion that there are optimizations in storage technology allow for the creation of specialized Chia farming hardware that costs an order of magnitude less than commodity disks.&lt;/p&gt;

&lt;p&gt;Even if it were possible to make such advantaged specialized hardware, it would likely be unprofitable to purchase storage solely for the purpose of farming. There’s $140 billion in storage capacity sold every year and a large fraction of that is unused and can easily be made to farm for Chia. Because Chia farming rewards will be much less than the replacement cost of that storage, work difficulty adjustment will make the reward per byte per day be substantially less than the amortized price of new storage. But even if all Chia farming hardware were purchased specifically for that use we believe the margin between specialized and unspecialized hardware will be within a factor of 2, and will explain why below.&lt;/p&gt;

&lt;p&gt;(Let’s set aside proof of time for now because that’s a different issue with a different set of dynamics and we are not at all claiming that there can’t be specialized hardware for that.)&lt;/p&gt;

&lt;p&gt;Some ground rules: The characteristics of a storage medium are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;seek time,&lt;/li&gt;
  &lt;li&gt;read rate,&lt;/li&gt;
  &lt;li&gt;write rate&lt;/li&gt;
  &lt;li&gt;price per terabyte.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Higher layer functionality of the file system such as inodes and indexing are a layer above the underlying hardware. It’s possible with all storage media to get access to a raw partition but applications rarely do that because modern mass storage is so unbelievably huge that the overhead added by such functionality doesn’t make a material impact on performance.&lt;/p&gt;

&lt;p&gt;Optimizing storage technology for bulk storage applications, Chia farming included, is dominated by price per terabyte. Any technology which could do better than commodity hard drives would be dominating already. Any new innovation which does better will successfully take over the whole storage market, not just Chia farming.&lt;/p&gt;

&lt;p&gt;The amount of time for the network to farm the next block will be at least one minute and will average five minutes. The speed of finding a proof of space doesn’t matter as long as it’s less than a minute, but rapidly makes farming not worth doing if it takes much more than a minute. Even the ‘glacial’ lookup and ‘slow’ read times on hard drives are still way better than what’s necessary to stay under a minute.&lt;/p&gt;

&lt;p&gt;A bit of a math interlude to justify this claim:&lt;/p&gt;

&lt;p&gt;The way proofs of space are formatted on disk is in a series of 8 lookup tables. The actual number may be slightly larger or smaller than 8. We haven’t finalized the details yet but it will be a single fixed value. When a challenge arrives a farmer has to do 8 sequential seeks to find out how good a response they have to that challenge and if so they do the complete set of 2⁸ (256) lookups to generate the complete proof of space and then publish it to the network. For most lookups which result in a non-winning response eight lookups even at 20 milliseconds per lookup will hardly even be noticeable in terms of drive performance, and the rare 256 lookups will clock in at around 5 seconds, well under the minute budget.&lt;/p&gt;

&lt;p&gt;Tape drives, on the other hand, have seek times which are far too long to be used effectively. LTO-8 is the current industry fastest tape standard and supports read speeds of 360 MB/s uncompressed. Proofs of space are random enough to not be very compressible. Thus to stay under the minute threshold one would only have about 21 GB per minute per tape read head to find your proof of space on each tape. LTO-8 drives appear to priced higher than $2500 per drive and the LTO-8 data cartridge is about $180 for a 12TB tape. LTO-10 may increase the total read speed by a little more than a factor of 3 to 1.1 GB/s but that still leaves you with only about 66 GB per minute and that standard looks to be a ways off. We’ve concocted a “frankentape” idea of multiple infinity spools of tape of a size of about ~20GB under the LTO-8 standard but the cost of retail tape drives is indicative that stripping out the read heads and the motors is still going to be pretty expensive as you’ve got to have the equivalent of ~ 49 read heads and motor pairs to get through one terabyte in less than a minute. You would probably also need a full time tape repair person.&lt;/p&gt;

&lt;p&gt;In talking to hard drive manufacturers, the biggest optimization they point out is potentially eliminating the cooling fan. Proof of space otherwise uses almost all of the other core requirements of generalized storage. You can potentially use older and slower seek times or bus technologies, but to get the read density needed, you have to use state of the art read and write heads. The core issue is that the demand for cheaper mass storage that is almost hot storage but a bit slower is very high already. Spinning disk has mostly become that solution as large storage buyers and even desktop computers have used spinning disk to help scale out SSD.&lt;/p&gt;

&lt;p&gt;For storage costs there are two price points that matter. The best price to store a terabyte online is &lt;a href=&quot;https://wasabi.com/&quot;&gt;Wasabi&lt;/a&gt; at $5/Tb/month. The cheapest drive we could find on June 4, 2018 at Amazon was $22.00 per terabyte for a &lt;a href=&quot;https://www.amazon.com/Seagate-SATA-3-5-Inch-Desktop-ST4000DM000/dp/B00B99JU4S/&quot;&gt;Seagate 4TB drive&lt;/a&gt; before taxes and shipping (if any — thanks Prime!) Since Wasabi gets more expensive after about 18 weeks it’s pretty clear that ownership of the spinning drive is going to be the cheapest farming platform currently.&lt;/p&gt;

&lt;p&gt;The most interesting alternative strategy that we’ve seen is write once blu-ray optical disc robots. A storage medium being limited to writing exactly once is less of a blocker for general purpose use than you might think, because that’s the usage pattern of a large fraction of all commercial storage and higher layer logic can be added to make such a thing look like a normal file system which happens to not free up space when you delete things and continues to lose empty space even when overwriting. Some ex-Facebook folks leveraged the near hot storage they’d created at Facebook to start a &lt;a href=&quot;http://fortune.com/2015/05/27/sony-buys-former-facebook-execs-startup/&quot;&gt;blu-ray robot storage company&lt;/a&gt; that Sony ended up acquiring. However it looks like Sony shelved the business shortly after acquiring it which doesn’t bode well for the technology. This is a potential optimization direction for pretty quick look up, write once optimization on proofs of space. But it is trading off the mass market scale of spinning disks for a new market of novel optical disk robots. They have to be quick to move through all the discs you’d want to read in the minute you have to find your best proof of space.&lt;/p&gt;

&lt;p&gt;There is some truth to the general assertion that mass success of Chia could encourage storage innovations. The problem is that there isn’t (yet) an order of magnitude better way to store information. That puts the technology speculation out in the land of pure scientific discoveries. We are hard pressed to come up with a huge storage innovation that isn’t equally or more valuable to the buyers of the &lt;a href=&quot;https://www.statista.com/statistics/285474/hdds-and-ssds-in-pcs-global-shipments-2012-2017/&quot;&gt;585 million hard drives and SSDs expected to sell in 2018&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a few optimizations in response to Chia’s success that we might see in storage technology. Letting a farm co-exist underneath a RAID that’s otherwise in use for other valuable purposes could unlock a lot of unused storage space, especially if the farm is beneath the RAID’s redundancy. We do expect to see custom ASICs added to some drives (and maybe all of them) to make it easy to seed a farm. But those are technologies for allowing the spare capacity on existing storage to be more expediently used for farming, not exclusively for farming. It is also important to note that the speed that &lt;a href=&quot;https://www.backblaze.com/blog/hard-drive-cost-per-gigabyte/&quot;&gt;per terabyte prices are falling has slowed storage industry wide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The primary attacks on proofs of space are algorithmic ones which use extra computational resources to get more rewards out of a fixed amount of space. Resisting those sorts of attacks is a major development focus for us and the subject of our &lt;a href=&quot;https://eprint.iacr.org/2018/183&quot;&gt;Asiacrypt paper&lt;/a&gt; which we’ve since made further improvements upon. We’re also going to have a best implementation competition with real cash rewards in the future after we’ve published a specification. We feel confident that such efforts will quickly result in a plateau of rewards for a modest amount of computation and that any better trade-offs will require an infeasible cost prohibitive amount of computational resources.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jun 2018 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2018/06/11/the-asic-resistance-of-proof-of-space.en.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/11/the-asic-resistance-of-proof-of-space.en.html</guid>
        
        
      </item>
    
  </channel>
</rss>
